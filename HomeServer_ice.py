# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `HomeServer.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module generated
_M_generated = Ice.openModule('generated')
__name__ = 'generated'

if 'NoInput' not in _M_generated.__dict__:
    _M_generated.NoInput = Ice.createTempClass()


    class NoInput(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::generated::NoInput'


    _M_generated._t_NoInput = IcePy.defineException('::generated::NoInput', NoInput, (), False, None, ())
    NoInput._ice_type = _M_generated._t_NoInput

    _M_generated.NoInput = NoInput
    del NoInput

if '_t_contents' not in _M_generated.__dict__:
    _M_generated._t_contents = IcePy.defineDictionary('::generated::contents', (), IcePy._t_string, IcePy._t_int)

_M_generated._t_Camera = IcePy.defineValue('::generated::Camera', Ice.Value, -1, (), False, True, None, ())

if 'CameraPrx' not in _M_generated.__dict__:
    _M_generated.CameraPrx = Ice.createTempClass()


    class CameraPrx(Ice.ObjectPrx):

        def move(self, phi, psi, context=None):
            return _M_generated.Camera._op_move.invoke(self, ((phi, psi), context))

        def moveAsync(self, phi, psi, context=None):
            return _M_generated.Camera._op_move.invokeAsync(self, ((phi, psi), context))

        def begin_move(self, phi, psi, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Camera._op_move.begin(self, ((phi, psi), _response, _ex, _sent, context))

        def end_move(self, _r):
            return _M_generated.Camera._op_move.end(self, _r)

        def zoomIn(self, value, context=None):
            return _M_generated.Camera._op_zoomIn.invoke(self, ((value,), context))

        def zoomInAsync(self, value, context=None):
            return _M_generated.Camera._op_zoomIn.invokeAsync(self, ((value,), context))

        def begin_zoomIn(self, value, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Camera._op_zoomIn.begin(self, ((value,), _response, _ex, _sent, context))

        def end_zoomIn(self, _r):
            return _M_generated.Camera._op_zoomIn.end(self, _r)

        def zoomOut(self, value, context=None):
            return _M_generated.Camera._op_zoomOut.invoke(self, ((value,), context))

        def zoomOutAsync(self, value, context=None):
            return _M_generated.Camera._op_zoomOut.invokeAsync(self, ((value,), context))

        def begin_zoomOut(self, value, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Camera._op_zoomOut.begin(self, ((value,), _response, _ex, _sent, context))

        def end_zoomOut(self, _r):
            return _M_generated.Camera._op_zoomOut.end(self, _r)

        def moveDetected(self, context=None):
            return _M_generated.Camera._op_moveDetected.invoke(self, ((), context))

        def moveDetectedAsync(self, context=None):
            return _M_generated.Camera._op_moveDetected.invokeAsync(self, ((), context))

        def begin_moveDetected(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Camera._op_moveDetected.begin(self, ((), _response, _ex, _sent, context))

        def end_moveDetected(self, _r):
            return _M_generated.Camera._op_moveDetected.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_generated.CameraPrx.ice_checkedCast(proxy, '::generated::Camera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_generated.CameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::generated::Camera'


    _M_generated._t_CameraPrx = IcePy.defineProxy('::generated::Camera', CameraPrx)

    _M_generated.CameraPrx = CameraPrx
    del CameraPrx

    _M_generated.Camera = Ice.createTempClass()


    class Camera(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::generated::Camera')

        def ice_id(self, current=None):
            return '::generated::Camera'

        @staticmethod
        def ice_staticId():
            return '::generated::Camera'

        def move(self, phi, psi, current=None):
            raise NotImplementedError("servant method 'move' not implemented")

        def zoomIn(self, value, current=None):
            raise NotImplementedError("servant method 'zoomIn' not implemented")

        def zoomOut(self, value, current=None):
            raise NotImplementedError("servant method 'zoomOut' not implemented")

        def moveDetected(self, current=None):
            raise NotImplementedError("servant method 'moveDetected' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_generated._t_CameraDisp)

        __repr__ = __str__


    _M_generated._t_CameraDisp = IcePy.defineClass('::generated::Camera', Camera, (), None, ())
    Camera._ice_type = _M_generated._t_CameraDisp

    Camera._op_move = IcePy.Operation('move', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                      (((), IcePy._t_double, False, 0), ((), IcePy._t_double, False, 0)), (), None, ())
    Camera._op_zoomIn = IcePy.Operation('zoomIn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                        (((), IcePy._t_double, False, 0),), (), None, ())
    Camera._op_zoomOut = IcePy.Operation('zoomOut', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                         (((), IcePy._t_double, False, 0),), (), None, ())
    Camera._op_moveDetected = IcePy.Operation('moveDetected', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False,
                                              None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_generated.Camera = Camera
    del Camera

_M_generated._t_CentralHeating = IcePy.defineValue('::generated::CentralHeating', Ice.Value, -1, (), False, True, None,
                                                   ())

if 'CentralHeatingPrx' not in _M_generated.__dict__:
    _M_generated.CentralHeatingPrx = Ice.createTempClass()


    class CentralHeatingPrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_generated.CentralHeating._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_generated.CentralHeating._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.CentralHeating._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_generated.CentralHeating._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_generated.CentralHeating._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_generated.CentralHeating._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.CentralHeating._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_generated.CentralHeating._op_turnOff.end(self, _r)

        def isOn(self, context=None):
            return _M_generated.CentralHeating._op_isOn.invoke(self, ((), context))

        def isOnAsync(self, context=None):
            return _M_generated.CentralHeating._op_isOn.invokeAsync(self, ((), context))

        def begin_isOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.CentralHeating._op_isOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isOn(self, _r):
            return _M_generated.CentralHeating._op_isOn.end(self, _r)

        def getTemperature(self, context=None):
            return _M_generated.CentralHeating._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_generated.CentralHeating._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.CentralHeating._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_generated.CentralHeating._op_getTemperature.end(self, _r)

        def setTemperature(self, temperature, context=None):
            return _M_generated.CentralHeating._op_setTemperature.invoke(self, ((temperature,), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_generated.CentralHeating._op_setTemperature.invokeAsync(self, ((temperature,), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.CentralHeating._op_setTemperature.begin(self, (
            (temperature,), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_generated.CentralHeating._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_generated.CentralHeatingPrx.ice_checkedCast(proxy, '::generated::CentralHeating', facetOrContext,
                                                                  context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_generated.CentralHeatingPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::generated::CentralHeating'


    _M_generated._t_CentralHeatingPrx = IcePy.defineProxy('::generated::CentralHeating', CentralHeatingPrx)

    _M_generated.CentralHeatingPrx = CentralHeatingPrx
    del CentralHeatingPrx

    _M_generated.CentralHeating = Ice.createTempClass()


    class CentralHeating(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::generated::CentralHeating')

        def ice_id(self, current=None):
            return '::generated::CentralHeating'

        @staticmethod
        def ice_staticId():
            return '::generated::CentralHeating'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def isOn(self, current=None):
            raise NotImplementedError("servant method 'isOn' not implemented")

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_generated._t_CentralHeatingDisp)

        __repr__ = __str__


    _M_generated._t_CentralHeatingDisp = IcePy.defineClass('::generated::CentralHeating', CentralHeating, (), None, ())
    CentralHeating._ice_type = _M_generated._t_CentralHeatingDisp

    CentralHeating._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False,
                                                None, (), (), (), None, ())
    CentralHeating._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False,
                                                 None, (), (), (), None, ())
    CentralHeating._op_isOn = IcePy.Operation('isOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None,
                                              (), (), (), ((), IcePy._t_bool, False, 0), ())
    CentralHeating._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal,
                                                        Ice.OperationMode.Normal, False, None, (), (), (),
                                                        ((), IcePy._t_double, False, 0), ())
    CentralHeating._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal,
                                                        Ice.OperationMode.Normal, False, None, (),
                                                        (((), IcePy._t_double, False, 0),), (), None, ())

    _M_generated.CentralHeating = CentralHeating
    del CentralHeating

_M_generated._t_Fridge = IcePy.defineValue('::generated::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_generated.__dict__:
    _M_generated.FridgePrx = Ice.createTempClass()


    class FridgePrx(Ice.ObjectPrx):

        def put(self, product, amount, context=None):
            return _M_generated.Fridge._op_put.invoke(self, ((product, amount), context))

        def putAsync(self, product, amount, context=None):
            return _M_generated.Fridge._op_put.invokeAsync(self, ((product, amount), context))

        def begin_put(self, product, amount, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Fridge._op_put.begin(self, ((product, amount), _response, _ex, _sent, context))

        def end_put(self, _r):
            return _M_generated.Fridge._op_put.end(self, _r)

        def take(self, product, amount, context=None):
            return _M_generated.Fridge._op_take.invoke(self, ((product, amount), context))

        def takeAsync(self, product, amount, context=None):
            return _M_generated.Fridge._op_take.invokeAsync(self, ((product, amount), context))

        def begin_take(self, product, amount, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Fridge._op_take.begin(self, ((product, amount), _response, _ex, _sent, context))

        def end_take(self, _r):
            return _M_generated.Fridge._op_take.end(self, _r)

        def list(self, context=None):
            return _M_generated.Fridge._op_list.invoke(self, ((), context))

        def listAsync(self, context=None):
            return _M_generated.Fridge._op_list.invokeAsync(self, ((), context))

        def begin_list(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Fridge._op_list.begin(self, ((), _response, _ex, _sent, context))

        def end_list(self, _r):
            return _M_generated.Fridge._op_list.end(self, _r)

        def setTemperature(self, temperature, context=None):
            return _M_generated.Fridge._op_setTemperature.invoke(self, ((temperature,), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_generated.Fridge._op_setTemperature.invokeAsync(self, ((temperature,), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Fridge._op_setTemperature.begin(self, ((temperature,), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_generated.Fridge._op_setTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_generated.FridgePrx.ice_checkedCast(proxy, '::generated::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_generated.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::generated::Fridge'


    _M_generated._t_FridgePrx = IcePy.defineProxy('::generated::Fridge', FridgePrx)

    _M_generated.FridgePrx = FridgePrx
    del FridgePrx

    _M_generated.Fridge = Ice.createTempClass()


    class Fridge(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::generated::Fridge')

        def ice_id(self, current=None):
            return '::generated::Fridge'

        @staticmethod
        def ice_staticId():
            return '::generated::Fridge'

        def put(self, product, amount, current=None):
            raise NotImplementedError("servant method 'put' not implemented")

        def take(self, product, amount, current=None):
            raise NotImplementedError("servant method 'take' not implemented")

        def list(self, current=None):
            raise NotImplementedError("servant method 'list' not implemented")

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_generated._t_FridgeDisp)

        __repr__ = __str__


    _M_generated._t_FridgeDisp = IcePy.defineClass('::generated::Fridge', Fridge, (), None, ())
    Fridge._ice_type = _M_generated._t_FridgeDisp

    Fridge._op_put = IcePy.Operation('put', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                     (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Fridge._op_take = IcePy.Operation('take', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                      (((), IcePy._t_string, False, 0), ((), IcePy._t_int, False, 0)), (), None, ())
    Fridge._op_list = IcePy.Operation('list', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (),
                                      (), ((), _M_generated._t_contents, False, 0), ())
    Fridge._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal,
                                                False, None, (), (((), IcePy._t_double, False, 0),), (), None, ())

    _M_generated.Fridge = Fridge
    del Fridge

_M_generated._t_GardenCamera = IcePy.defineValue('::generated::GardenCamera', Ice.Value, -1, (), False, True, None, ())

if 'GardenCameraPrx' not in _M_generated.__dict__:
    _M_generated.GardenCameraPrx = Ice.createTempClass()


    class GardenCameraPrx(_M_generated.CameraPrx):

        def turnInfraredOn(self, context=None):
            return _M_generated.GardenCamera._op_turnInfraredOn.invoke(self, ((), context))

        def turnInfraredOnAsync(self, context=None):
            return _M_generated.GardenCamera._op_turnInfraredOn.invokeAsync(self, ((), context))

        def begin_turnInfraredOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.GardenCamera._op_turnInfraredOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnInfraredOn(self, _r):
            return _M_generated.GardenCamera._op_turnInfraredOn.end(self, _r)

        def turnInfraredOff(self, context=None):
            return _M_generated.GardenCamera._op_turnInfraredOff.invoke(self, ((), context))

        def turnInfraredOffAsync(self, context=None):
            return _M_generated.GardenCamera._op_turnInfraredOff.invokeAsync(self, ((), context))

        def begin_turnInfraredOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.GardenCamera._op_turnInfraredOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnInfraredOff(self, _r):
            return _M_generated.GardenCamera._op_turnInfraredOff.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_generated.GardenCameraPrx.ice_checkedCast(proxy, '::generated::GardenCamera', facetOrContext,
                                                                context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_generated.GardenCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::generated::GardenCamera'


    _M_generated._t_GardenCameraPrx = IcePy.defineProxy('::generated::GardenCamera', GardenCameraPrx)

    _M_generated.GardenCameraPrx = GardenCameraPrx
    del GardenCameraPrx

    _M_generated.GardenCamera = Ice.createTempClass()


    class GardenCamera(_M_generated.Camera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::generated::Camera', '::generated::GardenCamera')

        def ice_id(self, current=None):
            return '::generated::GardenCamera'

        @staticmethod
        def ice_staticId():
            return '::generated::GardenCamera'

        def turnInfraredOn(self, current=None):
            raise NotImplementedError("servant method 'turnInfraredOn' not implemented")

        def turnInfraredOff(self, current=None):
            raise NotImplementedError("servant method 'turnInfraredOff' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_generated._t_GardenCameraDisp)

        __repr__ = __str__


    _M_generated._t_GardenCameraDisp = IcePy.defineClass('::generated::GardenCamera', GardenCamera, (), None,
                                                         (_M_generated._t_CameraDisp,))
    GardenCamera._ice_type = _M_generated._t_GardenCameraDisp

    GardenCamera._op_turnInfraredOn = IcePy.Operation('turnInfraredOn', Ice.OperationMode.Normal,
                                                      Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    GardenCamera._op_turnInfraredOff = IcePy.Operation('turnInfraredOff', Ice.OperationMode.Normal,
                                                       Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_generated.GardenCamera = GardenCamera
    del GardenCamera

_M_generated._t_Lamp = IcePy.defineValue('::generated::Lamp', Ice.Value, -1, (), False, True, None, ())

if 'LampPrx' not in _M_generated.__dict__:
    _M_generated.LampPrx = Ice.createTempClass()


    class LampPrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_generated.Lamp._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_generated.Lamp._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Lamp._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_generated.Lamp._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_generated.Lamp._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_generated.Lamp._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Lamp._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_generated.Lamp._op_turnOff.end(self, _r)

        def isOn(self, context=None):
            return _M_generated.Lamp._op_isOn.invoke(self, ((), context))

        def isOnAsync(self, context=None):
            return _M_generated.Lamp._op_isOn.invokeAsync(self, ((), context))

        def begin_isOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Lamp._op_isOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isOn(self, _r):
            return _M_generated.Lamp._op_isOn.end(self, _r)

        def setBrightness(self, lumens, context=None):
            return _M_generated.Lamp._op_setBrightness.invoke(self, ((lumens,), context))

        def setBrightnessAsync(self, lumens, context=None):
            return _M_generated.Lamp._op_setBrightness.invokeAsync(self, ((lumens,), context))

        def begin_setBrightness(self, lumens, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Lamp._op_setBrightness.begin(self, ((lumens,), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_generated.Lamp._op_setBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_generated.LampPrx.ice_checkedCast(proxy, '::generated::Lamp', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_generated.LampPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::generated::Lamp'


    _M_generated._t_LampPrx = IcePy.defineProxy('::generated::Lamp', LampPrx)

    _M_generated.LampPrx = LampPrx
    del LampPrx

    _M_generated.Lamp = Ice.createTempClass()


    class Lamp(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::generated::Lamp')

        def ice_id(self, current=None):
            return '::generated::Lamp'

        @staticmethod
        def ice_staticId():
            return '::generated::Lamp'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def isOn(self, current=None):
            raise NotImplementedError("servant method 'isOn' not implemented")

        def setBrightness(self, lumens, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_generated._t_LampDisp)

        __repr__ = __str__


    _M_generated._t_LampDisp = IcePy.defineClass('::generated::Lamp', Lamp, (), None, ())
    Lamp._ice_type = _M_generated._t_LampDisp

    Lamp._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (),
                                      (), None, ())
    Lamp._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                       (), (), None, ())
    Lamp._op_isOn = IcePy.Operation('isOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (),
                                    ((), IcePy._t_bool, False, 0), ())
    Lamp._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False,
                                             None, (), (((), IcePy._t_int, False, 0),), (), None, ())

    _M_generated.Lamp = Lamp
    del Lamp

_M_generated._t_Garage = IcePy.defineValue('::generated::Garage', Ice.Value, -1, (), False, True, None, ())

if 'GaragePrx' not in _M_generated.__dict__:
    _M_generated.GaragePrx = Ice.createTempClass()


    class GaragePrx(Ice.ObjectPrx):

        def open(self, context=None):
            return _M_generated.Garage._op_open.invoke(self, ((), context))

        def openAsync(self, context=None):
            return _M_generated.Garage._op_open.invokeAsync(self, ((), context))

        def begin_open(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Garage._op_open.begin(self, ((), _response, _ex, _sent, context))

        def end_open(self, _r):
            return _M_generated.Garage._op_open.end(self, _r)

        def close(self, context=None):
            return _M_generated.Garage._op_close.invoke(self, ((), context))

        def closeAsync(self, context=None):
            return _M_generated.Garage._op_close.invokeAsync(self, ((), context))

        def begin_close(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Garage._op_close.begin(self, ((), _response, _ex, _sent, context))

        def end_close(self, _r):
            return _M_generated.Garage._op_close.end(self, _r)

        def isOpen(self, context=None):
            return _M_generated.Garage._op_isOpen.invoke(self, ((), context))

        def isOpenAsync(self, context=None):
            return _M_generated.Garage._op_isOpen.invokeAsync(self, ((), context))

        def begin_isOpen(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_generated.Garage._op_isOpen.begin(self, ((), _response, _ex, _sent, context))

        def end_isOpen(self, _r):
            return _M_generated.Garage._op_isOpen.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_generated.GaragePrx.ice_checkedCast(proxy, '::generated::Garage', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_generated.GaragePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::generated::Garage'


    _M_generated._t_GaragePrx = IcePy.defineProxy('::generated::Garage', GaragePrx)

    _M_generated.GaragePrx = GaragePrx
    del GaragePrx

    _M_generated.Garage = Ice.createTempClass()


    class Garage(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::generated::Garage')

        def ice_id(self, current=None):
            return '::generated::Garage'

        @staticmethod
        def ice_staticId():
            return '::generated::Garage'

        def open(self, current=None):
            raise NotImplementedError("servant method 'open' not implemented")

        def close(self, current=None):
            raise NotImplementedError("servant method 'close' not implemented")

        def isOpen(self, current=None):
            raise NotImplementedError("servant method 'isOpen' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_generated._t_GarageDisp)

        __repr__ = __str__


    _M_generated._t_GarageDisp = IcePy.defineClass('::generated::Garage', Garage, (), None, ())
    Garage._ice_type = _M_generated._t_GarageDisp

    Garage._op_open = IcePy.Operation('open', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (),
                                      (), None, ())
    Garage._op_close = IcePy.Operation('close', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (),
                                       (), None, ())
    Garage._op_isOpen = IcePy.Operation('isOpen', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (),
                                        (), (), ((), IcePy._t_bool, False, 0), ())

    _M_generated.Garage = Garage
    del Garage

# End of module generated
